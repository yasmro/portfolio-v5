{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n// set client\nvar client = require('contentful').createClient({\n  space: process.env.REACT_APP_NEXT_PUBLIC_CONTENTFUL_SPACE_ID,\n  accessToken: process.env.REACT_APP_NEXT_PUBLIC_CONTENTFUL_ACCESS_TOKEN\n}); // get all posts\n\n\nexport function getAllPosts() {\n  return _getAllPosts.apply(this, arguments);\n} // get a post by slug\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getEntries({});\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.items) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n} // get more 3 latest posts\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(slug) {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.getEntries({\n              content_type: \"post\",\n              limit: 1,\n              \"fields.slug[in]\": slug\n            });\n\n          case 2:\n            entries = _context2.sent;\n\n            if (!entries.items) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", entries.items[0]);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}\n\nexport function getMorePosts(_x2) {\n  return _getMorePosts.apply(this, arguments);\n}\n\nfunction _getMorePosts() {\n  _getMorePosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(slug) {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return client.getEntries({\n              content_type: \"post\",\n              limit: 3,\n              order: \"-fields.date\",\n              \"fields.slug[nin]\": slug\n            });\n\n          case 2:\n            entries = _context3.sent;\n\n            if (!entries.items) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getMorePosts.apply(this, arguments);\n}\n\nfunction parsePostSlug(_ref) {\n  var fields = _ref.fields;\n  return {\n    slug: fields.slug\n  };\n}\n\nfunction parsePostSlugEntries(entries) {\n  var _entries$items;\n\n  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parsePostSlug;\n  return entries === null || entries === void 0 ? void 0 : (_entries$items = entries.items) === null || _entries$items === void 0 ? void 0 : _entries$items.map(cb);\n} // get all slugs of posts\n\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return client.getEntries({\n              content_type: \"post\",\n              select: \"fields.slug\"\n            });\n\n          case 2:\n            entries = _context4.sent;\n            return _context4.abrupt(\"return\", parsePostSlugEntries(entries, function (post) {\n              return post.fields;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}