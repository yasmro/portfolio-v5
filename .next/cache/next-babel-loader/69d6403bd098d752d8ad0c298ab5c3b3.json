{"ast":null,"code":"// set client\nconst client = require('contentful').createClient({\n  space: 'e7muoilmgguu',\n  accessToken: 'mVRLrgzLFIgwe3YL3XTV_V_MEF-7YQ1Hyr9k55LJ4-4'\n}); // get all posts\n\n\nexport async function getAllPosts() {\n  const entries = await client.getEntries({\n    content_type: \"portfolio\"\n  }); // content_type: \"post\",\n  // order: \"-fields.date\",\n\n  if (entries.items) {\n    return entries.items;\n  }\n\n  console.log(`Error getting Entries for ${contentType.name}.`);\n} // get a post by slug\n\nexport async function getPostBySlug(slug) {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    limit: 1,\n    \"fields.slug[in]\": slug\n  });\n\n  if (entries.items) {\n    return entries.items[0];\n  }\n\n  console.log(`Error getting Entries for ${contentType.name}.`);\n} // get more 3 latest posts\n\nexport async function getMorePosts(slug) {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    limit: 3,\n    order: \"-fields.date\",\n    \"fields.slug[nin]\": slug\n  });\n\n  if (entries.items) {\n    return entries.items;\n  }\n\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\nfunction parsePostSlug({\n  fields\n}) {\n  return {\n    slug: fields.slug\n  };\n}\n\nfunction parsePostSlugEntries(entries, cb = parsePostSlug) {\n  var _entries$items;\n\n  return entries === null || entries === void 0 ? void 0 : (_entries$items = entries.items) === null || _entries$items === void 0 ? void 0 : _entries$items.map(cb);\n} // get all slugs of posts\n\n\nexport async function getAllPostsWithSlug() {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    select: \"fields.slug\"\n  });\n  return parsePostSlugEntries(entries, post => post.fields);\n}","map":{"version":3,"sources":["/Users/YuOhno/portfoliov5/lib/index.js"],"names":["client","require","createClient","space","accessToken","getAllPosts","entries","getEntries","content_type","items","console","log","contentType","name","getPostBySlug","slug","limit","getMorePosts","order","parsePostSlug","fields","parsePostSlugEntries","cb","map","getAllPostsWithSlug","select","post"],"mappings":"AAAA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBC,YAAtB,CAAmC;AAChDC,EAAAA,KAAK,EAAE,cADyC;AAEhDC,EAAAA,WAAW,EAAE;AAFmC,CAAnC,CAAf,C,CAKA;;;AACA,OAAO,eAAeC,WAAf,GAA6B;AAClC,QAAMC,OAAO,GAAG,MAAMN,MAAM,CAACO,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE;AADwB,GAAlB,CAAtB,CADkC,CAI9B;AACF;;AACF,MAAIF,OAAO,CAACG,KAAZ,EAAmB;AACjB,WAAOH,OAAO,CAACG,KAAf;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BC,WAAW,CAACC,IAAK,GAA1D;AACD,C,CAED;;AACA,OAAO,eAAeC,aAAf,CAA6BC,IAA7B,EAAmC;AACxC,QAAMT,OAAO,GAAG,MAAMN,MAAM,CAACO,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE,MADwB;AAEtCQ,IAAAA,KAAK,EAAE,CAF+B;AAGtC,uBAAmBD;AAHmB,GAAlB,CAAtB;;AAKA,MAAIT,OAAO,CAACG,KAAZ,EAAmB;AACjB,WAAOH,OAAO,CAACG,KAAR,CAAc,CAAd,CAAP;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BC,WAAW,CAACC,IAAK,GAA1D;AACD,C,CAED;;AACA,OAAO,eAAeI,YAAf,CAA4BF,IAA5B,EAAkC;AACvC,QAAMT,OAAO,GAAG,MAAMN,MAAM,CAACO,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE,MADwB;AAEtCQ,IAAAA,KAAK,EAAE,CAF+B;AAGtCE,IAAAA,KAAK,EAAE,cAH+B;AAItC,wBAAoBH;AAJkB,GAAlB,CAAtB;;AAOA,MAAIT,OAAO,CAACG,KAAZ,EAAmB;AACjB,WAAOH,OAAO,CAACG,KAAf;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BC,WAAW,CAACC,IAAK,GAA1D;AACD;;AAED,SAASM,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAAmC;AACjC,SAAO;AACLL,IAAAA,IAAI,EAAEK,MAAM,CAACL;AADR,GAAP;AAGD;;AAED,SAASM,oBAAT,CAA8Bf,OAA9B,EAAuCgB,EAAE,GAAGH,aAA5C,EAA2D;AAAA;;AACzD,SAAOb,OAAP,aAAOA,OAAP,yCAAOA,OAAO,CAAEG,KAAhB,mDAAO,eAAgBc,GAAhB,CAAoBD,EAApB,CAAP;AACD,C,CAED;;;AACA,OAAO,eAAeE,mBAAf,GAAqC;AAC1C,QAAMlB,OAAO,GAAG,MAAMN,MAAM,CAACO,UAAP,CAAkB;AACtCC,IAAAA,YAAY,EAAE,MADwB;AAEtCiB,IAAAA,MAAM,EAAE;AAF8B,GAAlB,CAAtB;AAIA,SAAOJ,oBAAoB,CAACf,OAAD,EAAWoB,IAAD,IAAUA,IAAI,CAACN,MAAzB,CAA3B;AACD","sourcesContent":["// set client\n\nconst client = require('contentful').createClient({\n  space: 'e7muoilmgguu',\n  accessToken: 'mVRLrgzLFIgwe3YL3XTV_V_MEF-7YQ1Hyr9k55LJ4-4',\n});\n\n// get all posts\nexport async function getAllPosts() {\n  const entries = await client.getEntries({\n    content_type: \"portfolio\"\n  });\n      // content_type: \"post\",\n    // order: \"-fields.date\",\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\n// get a post by slug\nexport async function getPostBySlug(slug) {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    limit: 1,\n    \"fields.slug[in]\": slug,\n  });\n  if (entries.items) {\n    return entries.items[0];\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\n// get more 3 latest posts\nexport async function getMorePosts(slug) {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    limit: 3,\n    order: \"-fields.date\",\n    \"fields.slug[nin]\": slug,\n  });\n\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\nfunction parsePostSlug({ fields }) {\n  return {\n    slug: fields.slug,\n  };\n}\n\nfunction parsePostSlugEntries(entries, cb = parsePostSlug) {\n  return entries?.items?.map(cb);\n}\n\n// get all slugs of posts\nexport async function getAllPostsWithSlug() {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    select: \"fields.slug\",\n  });\n  return parsePostSlugEntries(entries, (post) => post.fields);\n}\n"]},"metadata":{},"sourceType":"module"}