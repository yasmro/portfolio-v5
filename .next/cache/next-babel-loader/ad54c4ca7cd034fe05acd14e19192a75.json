{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\n// set client\nvar client = require('contentful').createClient({\n  space: 'e7muoilmgguu',\n  accessToken: 'mVRLrgzLFIgwe3YL3XTV_V_MEF-7YQ1Hyr9k55LJ4-4'\n}); // get about\n\n\nexport function getAbout() {\n  return _getAbout.apply(this, arguments);\n} // get all posts\n\nfunction _getAbout() {\n  _getAbout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return client.getEntries({\n              content_type: \"about\"\n            });\n\n          case 2:\n            entries = _context.sent;\n\n            if (!entries.items) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getAbout.apply(this, arguments);\n}\n\nexport function getAllPosts() {\n  return _getAllPosts.apply(this, arguments);\n} // get a post by slug\n\nfunction _getAllPosts() {\n  _getAllPosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return client.getEntries({\n              content_type: \"portfolio\"\n            });\n\n          case 2:\n            entries = _context2.sent;\n\n            if (!entries.items) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getAllPosts.apply(this, arguments);\n}\n\nexport function getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n} // get more 3 latest posts\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(slug) {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return client.getEntries({\n              content_type: \"portfolio\",\n              limit: 1,\n              \"fields.slug[in]\": slug\n            });\n\n          case 2:\n            entries = _context3.sent;\n\n            if (!entries.items) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", entries.items[0]);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}\n\nexport function getMorePosts(_x2) {\n  return _getMorePosts.apply(this, arguments);\n}\n\nfunction _getMorePosts() {\n  _getMorePosts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(slug) {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return client.getEntries({\n              content_type: \"post\",\n              limit: 3,\n              order: \"-fields.date\",\n              \"fields.slug[nin]\": slug\n            });\n\n          case 2:\n            entries = _context4.sent;\n\n            if (!entries.items) {\n              _context4.next = 5;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", entries.items);\n\n          case 5:\n            console.log(\"Error getting Entries for \".concat(contentType.name, \".\"));\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getMorePosts.apply(this, arguments);\n}\n\nfunction parsePostSlug(_ref) {\n  var fields = _ref.fields;\n  return {\n    slug: fields.slug\n  };\n}\n\nfunction parsePostSlugEntries(entries) {\n  var _entries$items;\n\n  var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parsePostSlug;\n  return entries === null || entries === void 0 ? void 0 : (_entries$items = entries.items) === null || _entries$items === void 0 ? void 0 : _entries$items.map(cb);\n} // get all slugs of posts\n\n\nexport function getAllPostsWithSlug() {\n  return _getAllPostsWithSlug.apply(this, arguments);\n}\n\nfunction _getAllPostsWithSlug() {\n  _getAllPostsWithSlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var entries;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return client.getEntries({\n              content_type: \"post\",\n              select: \"fields.slug\"\n            });\n\n          case 2:\n            entries = _context5.sent;\n            return _context5.abrupt(\"return\", parsePostSlugEntries(entries, function (post) {\n              return post.fields;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getAllPostsWithSlug.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/YuOhno/portfoliov5/lib/index.js"],"names":["client","require","createClient","space","accessToken","getAbout","getEntries","content_type","entries","items","console","log","contentType","name","getAllPosts","getPostBySlug","slug","limit","getMorePosts","order","parsePostSlug","fields","parsePostSlugEntries","cb","map","getAllPostsWithSlug","select","post"],"mappings":"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","sourcesContent":["// set client\n\nconst client = require('contentful').createClient({\n  space: 'e7muoilmgguu',\n  accessToken: 'mVRLrgzLFIgwe3YL3XTV_V_MEF-7YQ1Hyr9k55LJ4-4',\n});\n\n// get about\nexport async function getAbout() {\n  const entries = await client.getEntries({\n    content_type: \"about\"\n  });\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\n// get all posts\nexport async function getAllPosts() {\n  const entries = await client.getEntries({\n    content_type: \"portfolio\"\n  });\n      // content_type: \"post\",\n    // order: \"-fields.date\",\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\n// get a post by slug\nexport async function getPostBySlug(slug) {\n  const entries = await client.getEntries({\n    content_type: \"portfolio\",\n    limit: 1,\n    \"fields.slug[in]\": slug,\n  });\n  if (entries.items) {\n    return entries.items[0];\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\n// get more 3 latest posts\nexport async function getMorePosts(slug) {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    limit: 3,\n    order: \"-fields.date\",\n    \"fields.slug[nin]\": slug,\n  });\n\n  if (entries.items) {\n    return entries.items;\n  }\n  console.log(`Error getting Entries for ${contentType.name}.`);\n}\n\nfunction parsePostSlug({ fields }) {\n  return {\n    slug: fields.slug,\n  };\n}\n\nfunction parsePostSlugEntries(entries, cb = parsePostSlug) {\n  return entries?.items?.map(cb);\n}\n\n// get all slugs of posts\nexport async function getAllPostsWithSlug() {\n  const entries = await client.getEntries({\n    content_type: \"post\",\n    select: \"fields.slug\",\n  });\n  return parsePostSlugEntries(entries, (post) => post.fields);\n}\n"]},"metadata":{},"sourceType":"module"}