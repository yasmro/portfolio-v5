'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Accordion = (function (_React$Component) {
  _inherits(Accordion, _React$Component);

  function Accordion(props) {
    _classCallCheck(this, Accordion);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Accordion).call(this, props));

    _this.state = { sections: [] };
    return _this;
  }

  _createClass(Accordion, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      if (this.props.children) {
        (function () {
          var sections = [];
          _react2.default.Children.forEach(_this2.props.children, function (child) {
            sections.push({ active: child.props.active ? true : false });
          });
          if (!_this2.props.allowAllClosed && _this2.getNumberOfActive(sections) === 0 && sections[0]) {
            sections[0].active = true;
          }
          _this2.setState({ sections: sections });
        })();
      }
    }
  }, {
    key: 'select',
    value: function select(selectSection) {
      var sections = this.state.sections;

      if (sections[selectSection].active) {
        if (this.props.allowAllClosed || this.getNumberOfActive(sections) > 1) {
          sections[selectSection].active = false;
        } else {
          return;
        }
      } else {
        if (!this.props.multiExpand) {
          sections = sections.map(function () {
            return { active: false };
          });
        }
        sections[selectSection].active = true;
      }

      this.setState({ sections: sections });
    }
  }, {
    key: 'render',
    value: function render() {
      var children = _react2.default.Children.map(this.props.children, (function (child, index) {
        return _react2.default.cloneElement(child, {
          active: this.state.sections[index] ? this.state.sections[index].active : false,
          activate: this.select.bind(this, index)
        });
      }).bind(this));
      return _react2.default.createElement(
        'div',
        { className: 'accordion' },
        children
      );
    }
  }, {
    key: 'getNumberOfActive',
    value: function getNumberOfActive(sections) {
      return sections.reduce(function (total, item) {
        return total + (item.active ? 1 : 0);
      }, 0);
    }
  }]);

  return Accordion;
})(_react2.default.Component);

exports.default = Accordion;

Accordion.defaultProps = {
  multiExpand: false,
  allowAllClosed: false
};