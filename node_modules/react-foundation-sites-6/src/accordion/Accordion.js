import React from 'react';

export default class Accordion extends React.Component {

  constructor(props) {
    super(props);
    this.state = { sections: [] };
  }

  componentWillMount() {
    if (this.props.children) {
      let sections = [];
      React.Children.forEach(this.props.children, function (child) {
        sections.push({active: child.props.active ? true : false});
      });
      if (!this.props.allowAllClosed && this.getNumberOfActive(sections) === 0 && sections[0]) {
        sections[0].active = true;
      }
      this.setState({sections: sections});
    }
  }

  select(selectSection) {
    let sections = this.state.sections;

    if (sections[selectSection].active) {
      if (this.props.allowAllClosed || this.getNumberOfActive(sections) > 1) {
        sections[selectSection].active = false;
      } else {
        return;
      }
    } else {
      if (!this.props.multiExpand) {
        sections = sections.map(() => ({active: false}));
      }
      sections[selectSection].active = true;
    }

    this.setState({sections: sections});
  }

  render() {
    var children = React.Children.map(this.props.children, function (child, index) {
      return React.cloneElement(child, {
        active: this.state.sections[index]? this.state.sections[index].active: false,
        activate: this.select.bind(this, index)
      });
    }.bind(this));
    return (
      <div className='accordion'>
          {children}
      </div>
    );
  }

  getNumberOfActive(sections) {
    return sections.reduce((total, item) => total + (item.active ? 1 : 0), 0);
  }

}

Accordion.defaultProps = {
  multiExpand: false,
  allowAllClosed: false
};
